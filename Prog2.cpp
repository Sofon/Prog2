# include <iostream>
#include <conio.h>
#include <stdlib.h>
using namespace std;
// обьявляем глобальные переменные
// n - размерность матрицы
// i,j - индексы
// maxim - максимальный элемент матрицы
// **Mas - двумерная матрица
// sum - переменная для хранения суммы элементов ниже главной диагонали
// indexMaxI - i-тый индекс максимального элемента 
// indexMaxJ - j-тый индекс максимального элемента 
int n, i, j, maxim=0, **Mas, sum=0, indexMaxI, indexMaxJ;
// - переменная, принимающаяя значение 0 или 1, флаг для проверки раположения максимального элемента
bool flag=true;

//Процедура – это подпрограмма, которая может вызываться в коде основной программы и производить какие либо действия
//с переданными в нее переменными или с использованием глобальных переменных

// функция вывода результата на экран
void print_Result()
{
	if(flag) // проверяем, если флаг того, что максимальный элемент ниже главной диагонали или на ней =true, то
		cout<<"Max element nije glavnoy diagonali ili na ney\n";
	else // иначе
		cout<<"summa = "<<sum<<"\n";
}

// функция подсчёта суммы элементов, которые лежат ниже главной диагонали
void summ() 
{
	if(!flag) // ведём счёт, если только флаг того, что максимальный элемент ниже главной диагонали =false
		for (i = 0; i < n; i++) // перебираем все строки
			for (j = 0; j < i; j++) // в строке берём элементы начиная с 0 до элемента главной диагонали
				sum+=Mas[i][j]; // прибавляем к сумме
}

// функция поиска максимального элемента в матрице
void poiskMax()
{
	for(j=0;j<n;j++) // берём столбец
		for(i=0;i<n;i++) // пробегаем по всем строкам столбца
			if(Mas[i][j]>=maxim) // если [i][j] элемент матрицы больше текущего максимума, то
			{
				maxim=Mas[i][j]; // текущим максимуиои становится [i][j] элемент матрицы
				indexMaxI=i; // запоминаем строку в которой находится максимальный элемент
				indexMaxJ=j; // запоминаем в каком столбце сохранённой строки находится максимальный элемент
			}
}

// функция проверки расположения максимального элемента матрицы
void proverkaRaspoloj()
{
	for(i=0;i<n;i++) // перебираем все строки
		for(j=i+1;j<n;j++) // в строке берём элементы начиная с (элемента_главной_диагонали+1) до последнего стобца матрицы
		{
			if(indexMaxJ==j) // если столбец индекс максимального элемента равен текущему столбцу, то
				if(indexMaxI==i) // проверяем, если строка максимального элемента равна текущей, то
					flag=false; // устанавливаем флаг в false (0), что будет означать, 
								//что максимальный элемент находится выше главной диагонали
		}
}

// функция вывода введённой матрицы на экран
void print_Matrix()
{
	cout<<"Vvedennaya matrica:\n";
		for(i=0;i<n;i++) // для каждой строки
		{
			for(j=0;j<n;j++) // перебираем все столбцы
			{
				cout<<Mas[i][j]<<"\t"; // выводм на экран и табулируем \t
			}
			cout<<"\n"; // столбцы кончились - переводим курсор на новую строку
		}
}

// главная функция программы
int main()
{

	cout<<"Vvedite razmer matrici NxN: ";
    cin >> n;
	// выделяем двумерный динамический массив из n*n 
	Mas=new int *[n];
	for(i=0;i<n;i++)
		Mas[i]=new int[n];
	// вводим массив
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)
		{
			system("cls");
			cout<<"Vvedite ["<<i+1<<"]["<<j+1<<"] element matrici: ";
			cin>>Mas[i][j];
		}
		// вызываем функцию вывода введённой матрицы на экран
		print_Matrix();
		// вызываем функцию поиска максимального элемента в матрице
		poiskMax();
		// вызываем функцию проверки расположения максимального элемента матрицы
		proverkaRaspoloj();
		// если максимальный элемент выше главной диагонали, то
		if(!flag)
			// вызываем функцию подсчёта суммы элементов, которые лежат ниже главной диагонали
			summ();
		// вызываем функцию вывода результата на экран
		print_Result();
		// останавливаем выполнение программы, пока пользователь не нажмёт Enter
 getch();
 return 0;
}